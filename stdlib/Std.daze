is Std;

fn out(value :: String) :: Void {
  `raw
  puts(value.value())
  `
}

fn out(value :: Int) :: Void {
  `raw
  puts(value.value())
  `
}

fn out(value :: Any) :: Void {
  `raw
  puts(value)
  `
}

fn out_raw(value :: String) :: Void {
  `raw
  printf(value.value())
  `
}

fn out_raw(value :: Any) :: Void {
  `raw
  printf(value)
  `
}

fn input() :: String {
  `raw
  gets
  `
}

fn type(val :: Any) :: Any {
  `raw
  DazeString.new(typeof(val).to_s)
  `
}

fn range(max :: Int32) :: Any {
  i = 0;
  arr = []Int32{};
  for (i < max) {
    arr <- i;
    i++;
  }

  ret arr;
}
fn range(min :: Int32, max :: Int32) :: Any {
  i = min;
  arr = []Int32{};
  for (i < max) {
    arr <- i;
    i++;
  }

  ret arr;
}

fn string(num :: Int32) :: String {
  ret "#{num}"
}

fn int(str :: String) :: Int32 {
  `raw
  str.to_i
  `
}